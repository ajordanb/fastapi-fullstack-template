/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ValidateMagicLinkImport } from './routes/validateMagicLink'
import { Route as UnauthorizedImport } from './routes/unauthorized'
import { Route as RequestNewPasswordImport } from './routes/requestNewPassword'
import { Route as RequestMagicLinkImport } from './routes/requestMagicLink'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as AuthenticatedManagerImport } from './routes/_authenticated/_manager'
import { Route as AuthenticatedAdminImport } from './routes/_authenticated/_admin'
import { Route as AuthenticatedAdminUsersImport } from './routes/_authenticated/admin/users'
import { Route as AuthenticatedManagerReportsImport } from '@/routes/_authenticated/manager/reports'

// Create/Update Routes

const ValidateMagicLinkRoute = ValidateMagicLinkImport.update({
  id: '/validateMagicLink',
  path: '/validateMagicLink',
  getParentRoute: () => rootRoute,
} as any)

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const RequestNewPasswordRoute = RequestNewPasswordImport.update({
  id: '/requestNewPassword',
  path: '/requestNewPassword',
  getParentRoute: () => rootRoute,
} as any)

const RequestMagicLinkRoute = RequestMagicLinkImport.update({
  id: '/requestMagicLink',
  path: '/requestMagicLink',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedManagerRoute = AuthenticatedManagerImport.update({
  id: '/manager',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAdminRoute = AuthenticatedAdminImport.update({
  id: '/_admin',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAdminUsersRoute = AuthenticatedAdminUsersImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedManagerReportsRoute =
  AuthenticatedManagerReportsImport.update({
    id: '/reports',
    path: '/reports',
    getParentRoute: () => AuthenticatedManagerRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/requestMagicLink': {
      id: '/requestMagicLink'
      path: '/requestMagicLink'
      fullPath: '/requestMagicLink'
      preLoaderRoute: typeof RequestMagicLinkImport
      parentRoute: typeof rootRoute
    }
    '/requestNewPassword': {
      id: '/requestNewPassword'
      path: '/requestNewPassword'
      fullPath: '/requestNewPassword'
      preLoaderRoute: typeof RequestNewPasswordImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
    '/validateMagicLink': {
      id: '/validateMagicLink'
      path: '/validateMagicLink'
      fullPath: '/validateMagicLink'
      preLoaderRoute: typeof ValidateMagicLinkImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_admin': {
      id: '/_authenticated/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedAdminImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_manager': {
      id: '/_authenticated/_manager'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedManagerImport
      parentRoute: typeof AuthenticatedImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_manager/reports': {
      id: '/_authenticated/_manager/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof AuthenticatedManagerReportsImport
      parentRoute: typeof AuthenticatedManagerImport
    }
    '/_authenticated/admin/users': {
      id: '/_authenticated/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthenticatedAdminUsersImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedManagerRouteChildren {
  AuthenticatedManagerReportsRoute: typeof AuthenticatedManagerReportsRoute
}

const AuthenticatedManagerRouteChildren: AuthenticatedManagerRouteChildren = {
  AuthenticatedManagerReportsRoute: AuthenticatedManagerReportsRoute,
}

const AuthenticatedManagerRouteWithChildren =
  AuthenticatedManagerRoute._addFileChildren(AuthenticatedManagerRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedAdminRoute: typeof AuthenticatedAdminRoute
  AuthenticatedManagerRoute: typeof AuthenticatedManagerRouteWithChildren
  AuthenticatedAdminUsersRoute: typeof AuthenticatedAdminUsersRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAdminRoute: AuthenticatedAdminRoute,
  AuthenticatedManagerRoute: AuthenticatedManagerRouteWithChildren,
  AuthenticatedAdminUsersRoute: AuthenticatedAdminUsersRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedManagerRouteWithChildren
  '/login': typeof LoginRoute
  '/requestMagicLink': typeof RequestMagicLinkRoute
  '/requestNewPassword': typeof RequestNewPasswordRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/validateMagicLink': typeof ValidateMagicLinkRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/reports': typeof AuthenticatedManagerReportsRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedManagerRouteWithChildren
  '/login': typeof LoginRoute
  '/requestMagicLink': typeof RequestMagicLinkRoute
  '/requestNewPassword': typeof RequestNewPasswordRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/validateMagicLink': typeof ValidateMagicLinkRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/reports': typeof AuthenticatedManagerReportsRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/requestMagicLink': typeof RequestMagicLinkRoute
  '/requestNewPassword': typeof RequestNewPasswordRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/validateMagicLink': typeof ValidateMagicLinkRoute
  '/_authenticated/_admin': typeof AuthenticatedAdminRoute
  '/_authenticated/_manager': typeof AuthenticatedManagerRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_authenticated/_manager/reports': typeof AuthenticatedManagerReportsRoute
  '/_authenticated/admin/users': typeof AuthenticatedAdminUsersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/requestMagicLink'
    | '/requestNewPassword'
    | '/unauthorized'
    | '/validateMagicLink'
    | '/demo/tanstack-query'
    | '/reports'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/requestMagicLink'
    | '/requestNewPassword'
    | '/unauthorized'
    | '/validateMagicLink'
    | '/demo/tanstack-query'
    | '/reports'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/requestMagicLink'
    | '/requestNewPassword'
    | '/unauthorized'
    | '/validateMagicLink'
    | '/_authenticated/_admin'
    | '/_authenticated/_manager'
    | '/demo/tanstack-query'
    | '/_authenticated/_manager/reports'
    | '/_authenticated/admin/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RequestMagicLinkRoute: typeof RequestMagicLinkRoute
  RequestNewPasswordRoute: typeof RequestNewPasswordRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  ValidateMagicLinkRoute: typeof ValidateMagicLinkRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  RequestMagicLinkRoute: RequestMagicLinkRoute,
  RequestNewPasswordRoute: RequestNewPasswordRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  ValidateMagicLinkRoute: ValidateMagicLinkRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/login",
        "/requestMagicLink",
        "/requestNewPassword",
        "/unauthorized",
        "/validateMagicLink",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/_admin",
        "/_authenticated/manager",
        "/_authenticated/admin/users"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/requestMagicLink": {
      "filePath": "requestMagicLink.tsx"
    },
    "/requestNewPassword": {
      "filePath": "requestNewPassword.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.tsx"
    },
    "/validateMagicLink": {
      "filePath": "validateMagicLink.tsx"
    },
    "/_authenticated/_admin": {
      "filePath": "_authenticated/_admin.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/manager": {
      "filePath": "_authenticated/manager.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/manager/reports"
      ]
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/_authenticated/manager/reports": {
      "filePath": "_authenticated/manager/reports.tsx",
      "parent": "/_authenticated/manager"
    },
    "/_authenticated/admin/users": {
      "filePath": "_authenticated/admin/users.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
