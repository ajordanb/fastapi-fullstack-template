version: '3.8'

services:
  # Redis - Message Broker for Background Tasks
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-your_backend_app_backend}
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend Application
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - DB_CONN_STR=mongodb://admin:password@mongodb:27017/
      - DB_NAME=${MONGO_DATABASE:-your_backend_app_backend}

      # Redis Configuration
      - DRAMATIQ_BROKER_URL=redis://redis:6379/0
      - DRAMATIQ_NAMESPACE=api_starter

      # App Configuration
      - APP_NAME=${APP_NAME:-API Starter}
      - APP_DOMAIN=${APP_DOMAIN:-http://localhost:8000}
      - MODE=${MODE:-production}

      # Email Configuration
      - EMAILS_ENABLED=${EMAILS_ENABLED:-true}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TLS=${SMTP_TLS:-true}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME}

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - EMAIL_RESET_TOKEN_EXPIRE_MINUTES=${EMAIL_RESET_TOKEN_EXPIRE_MINUTES:-15}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      # Mount logs directory (optional)
      - ./backend/logs:/app/logs

  # Background Workers (Same image, different command)
  workers:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["uv", "run", "dramatiq", "app.tasks.background_tasks", "--processes", "2", "--threads", "4"]
    environment:
      # Same environment as API
      - DB_CONN_STR=mongodb://admin:password@mongodb:27017/
      - DB_NAME=${MONGO_DATABASE:-your_backend_app_backend}
      - DRAMATIQ_BROKER_URL=redis://redis:6379/0
      - DRAMATIQ_NAMESPACE=api_starter
      - APP_NAME=${APP_NAME:-API Starter}
      - APP_DOMAIN=${APP_DOMAIN:-http://localhost:8000}
      - MODE=${MODE:-production}
      - EMAILS_ENABLED=${EMAILS_ENABLED:-true}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TLS=${SMTP_TLS:-true}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-f", "dramatiq"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      # Mount logs directory (optional)
      - ./backend/logs:/app/logs

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    profiles:
      - production

volumes:
  redis_data:
  mongodb_data:

networks:
  default:
    name: api_starter_network